=== Blockylicious ===
Contributors:      Jean and The WordPress Contributors
Tags:              block
Requires at least: 6.7
Tested up to:      6.8
Stable tag:        1.1.1
License:           GPL-2.0-or-later
License URI:       https://www.gnu.org/licenses/gpl-2.0.html

Custom plugin with 3 custom blocks and custom text effects.

== Installation ==

1. Upload the plugin files to the `/wp-content/plugins/` directory, or install the plugin through the WordPress plugins screen by selecting the zip archive.
2. Activate the plugin through the 'Plugins' screen in WordPress


== Description ==
= Curvy Block =
An adjustable curvy svg shape can be used as a contrasting background to make any text stand out.

= Piccy Block = 
A special gallery diplays clickable thumbnail images and the only the selected image full-size.

= Clicky Buttons =
Upgraded buttons can link to any standard or custom post site on your site. The URL uses the post ID, so changing the title of the post will not break the link.

= Low Highlight Rich Text effects =
Custom script in index.js registers a unique text effect.

= Unique Blockylicious Design Patterns = 
Design patterns make it easy and quick for you to start using the plugin. Add call-to-action sections with the Curvy block or a set of Clicky Buttons with headings and text that you can customize.



== REGISTRATION ==

In this plugin, the init hook uses either the function 'wp_register_block_types_from_metadata_collection' (Added in WP v 6.8)
or 'wp_register_block_metadata_collection' (Added in WP v 6.7) to register custom blocks using a `blocks-manifest.php` file that is generated by the run and build scripts.
 Behind the scenes, it also registers all assets so they can be enqueued through the block editor in the corresponding context.

 see https://make.wordpress.org/core/2025/03/13/more-efficient-block-type-registration-in-6-8/
 and
 https://make.wordpress.org/core/2024/10/17/new-block-type-registration-apis-to-improve-performance-in-wordpress-6-7/

 
It also uses a filter with 'block_categories_all' and a custom function 'blockylicious_add_custom_block_category' to add the category "Blockylicious" to the block inserter in the Editor sidebar


== Frequently Asked Questions ==

= Can I use Blockylicious custom blocks with WooCommerce?  =

Yes, Blockylicious can be installed on the same site where you have WooCommerce installed. It can be used to add blocks and styles to your pages and blog posts. To add Blockylicious to your product pages, edit the template that controls the layout.


== Changelog ==
= 1.1.2 =
* Release
Updated required PHP version to 8.0
= 1.1.1 =
Added new rich text format in index.js. Low Highlight style can now use a gradient, anything selected by the user.
= 1.1.0 =
Adjusted structure and path to include the blockylicious-block-patterns.php file. Moved from root to src directory.
Added options in package.json for start and build scripts. See NPM Notes.

= 0.1.0 =
(JeanK development)
Changes to RichText component in clickyButton/edit.js:
Added identifier='labelText'
Removed this line: onSplit={() => { }} onReplace={() => { }}
Changes to clickyButton/block.json: Added "supports": "splitting": false
Why?
WordPress 6.6 and later versions introduced a unified approach to block splitting, replacing the onSplit prop in the RichText component with the "splitting" key in block.json.
RichTextâ€™s optional onSplit prop was deprecated. Since the block.json "splitting" setting determines if we can split a block, we no longer need the block to pass an onSplit function.

== More Information ==
= Developers =
Webpack scripts include options to bundle the extra PHP include files. Prefer to use "npm run start:copy-php" and "npm run build:copy-php" to include the extra PHP files. Without that, the blockylicious-block-patterns will not be included.

Most blocks use render.php for the front. PiccyGallery uses a view.js file to enable user interaction.
Note that in block.json, at the bottom is "viewScript": "file:./view.js"
This indicates PiccyGallery is using the older "viewScript", rather than "viewScriptModule." You will need to change this if you want to use the Interactivity API.

Note that in block.json the support for html mode is disabled for some blocks.(Editor can't directly edit the code) If you want to enable html mode, change this to _true_
"supports": {
		"html": false, }
